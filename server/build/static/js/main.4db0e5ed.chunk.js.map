{"version":3,"sources":["api/authService.js","pages/SignUp.js","pages/Login.js","components/PrivateRoute.js","api/userService.js","components/UpdateProfile.js","pages/Profile.js","components/ToursList.js","pages/AllTours.js","pages/YourTours.js","components/AutoSuggest.js","pages/CreateTour.js","components/NavBar.js","components/DemoCarousel.js","pages/Tour.js","App.js","serviceWorker.js","index.js"],"names":["service","axios","create","baseURL","process","withCredentials","signup","user","post","loginAPI","a","data","console","log","isLoggedIn","get","logout","SignUp","state","username","password","errorMessage","onChangeHandler","e","target","name","value","setState","submitHandler","preventDefault","then","res","props","history","push","catch","response","onSubmit","this","type","placeholder","onChange","to","React","Component","Login","setUserState","currentUser","protectedRoute","component","loggedinUser","rest","render","createTour","tour","createProfile","profile","UpdateProfile","formRef","createRef","formData","FormData","current","err","ref","Profile","surname","age","skiLevel","tours","length","about","profilePicture","src","alt","className","getDateFormat","date","getUTCFullYear","getMonth","getDate","ToursList","radioBtn","toursTemp","getToursByDate","startDate","today","Date","todayDate","setDate","setToursState","searchLocation","filteredArray","filter","mountainId","location","toUpperCase","includes","toursArray","searchRecom","recomended","searchSnow","snowQuality","searchDifficulty","difficulty","checked","map","index","key","_id","picture","mountainName","region","height","elevationGain","snowDepth","AllTours","Auto","suggestions","mountains","getSuggestions","inputValue","trim","toLowerCase","inputLength","mountain","slice","getSuggestionValue","suggestion","renderSuggestion","event","newValue","myMountainId","myMountain","setValue","onSuggestionsFetchRequested","onSuggestionsClearRequested","inputProps","CreateTour","id","multiple","NavBar","logoutHandler","onClick","DemoCarousel","pictures","foto","Tour","message","tourId","getTour","match","params","comment","error","href","link","description","comments","App","componentDidMount","path","PrivateRoute","YourTours","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4db0e5ed.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const service = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  withCredentials: true\n});\n\nexport const signup = user => {\n  return service.post(\"auth/signup\", user);\n};\n\n// vedi auth.js riga 75\nexport const loginAPI = async user => {\n  try {\n    const { data } = await service.post(\"/auth/login\", user);\n\n    return data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const isLoggedIn = async () => {\n  try {\n    const { data } = await service.get(\"/auth/isLoggedIn\");\n\n    return data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const logout = async () => {\n  try {\n    const { data } = await service.get(\"/auth/logout\");\n\n    return data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n","import React from \"react\";\nimport { signup } from \"../api/authService\";\nimport { Link } from \"react-router-dom\";\n\nexport default class SignUp extends React.Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    errorMessage: null\n  };\n\n  onChangeHandler = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  submitHandler = e => {\n    e.preventDefault();\n    signup(this.state)\n      .then(res => {\n        console.log(res);\n        this.props.history.push(\"/Login\");\n        // return res;\n      })\n      .catch(res => {\n        console.log(res.response.data, \"tesssst\");\n        this.setState({\n          errorMessage: res.response.data.errorMessage\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>this is the signup page</h1>\n        <form onSubmit={this.submitHandler}>\n          <input\n            type=\"text\"\n            name=\"username\"\n            placeholder=\"username\"\n            onChange={this.onChangeHandler}\n          />\n          <input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            onChange={this.onChangeHandler}\n          />\n          <button type=\"submit\">submit</button>\n        </form>\n        <p>\n          Already have a login?\n          <Link to=\"/login\"> Login </Link>\n          <p>{this.state.errorMessage}</p>\n        </p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { loginAPI } from \"../api/authService\";\nimport { Link } from \"react-router-dom\";\n\nexport default class Login extends React.Component {\n  state = {\n    username: \"\",\n    password: \"\"\n  };\n\n  onChangeHandler = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  //   submitHandler = e => {\n  //     e.preventDefault();\n  //     loginAPI(this.state);\n  //     this.props.setUserState(this.state);\n  //     this.props.history.push(\"/\");\n  //   };\n\n  submitHandler = async e => {\n    e.preventDefault();\n    try {\n      const user = await loginAPI(this.state);\n\n      this.props.setUserState(user.currentUser);\n\n      this.props.history.push(\"/Home\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>this is the login page</h1>\n        <form onSubmit={this.submitHandler}>\n          <input\n            type=\"text\"\n            name=\"username\"\n            placeholder=\"username\"\n            onChange={this.onChangeHandler}\n          />\n          <input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            onChange={this.onChangeHandler}\n          />\n          <button type=\"submit\">submit</button>\n        </form>\n        <p>\n          You don't have an account?\n          <Link to=\"/signup\"> Signup</Link>\n        </p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\n// the private route is a function that will return a Route component or Redirect.\n// that expects a component, an user an other props.\n// the other props will be set in ...rest (the most important one will be the path definition (the path we see in the browser's navigation))\nconst protectedRoute = ({ component: Component, loggedinUser, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={props => {\n        //render is a function that checks if the user is passed a long. If not the private route will redirect to \"/\"\n        if (loggedinUser) {\n          // we added  {...res} to pass from App.js the props+the function to the components <UpdateProfile> and <Profile>\n          return <Component {...props} {...rest} loggedinUser={loggedinUser} />;\n        } else {\n          return <Redirect to=\"/\" />;\n        }\n      }}\n    />\n  );\n};\n\nexport default protectedRoute;\n","import axios from \"axios\";\n\nconst service = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  withCredentials: true\n});\n\nexport const createTour = async tour => {\n  try {\n    const { data } = await service.post(\"/create-tour\", tour);\n\n    return data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const createProfile = async profile => {\n  try {\n    const { data } = await service.post(\"/profile\", profile);\n\n    return data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n","import React from \"react\";\nimport { createProfile } from \"../api/userService\";\n\nexport default class UpdateProfile extends React.Component {\n  formRef = React.createRef();\n\n  submitHandler = e => {\n    e.preventDefault();\n\n    // formData per passare la foto nel req.file (req.body e' solo testo)\n    const formData = new FormData(this.formRef.current);\n    // createTour(this.state, formData)\n    createProfile(formData)\n      .then(res => {\n        console.log(res);\n        this.props.setUserState(res);\n        this.props.history.push(\"/profile\");\n      })\n      .catch(err => {\n        console.log(err);\n        // this.setState({\n        //   errorMessage: res.response.data.errorMessage\n        // });\n      });\n  };\n\n  render() {\n    console.log(this.props, \"vedi props\");\n    return (\n      <div>\n        <h1>Hi {this.props.username} update your profile</h1>\n\n        <form ref={this.formRef} onSubmit={this.submitHandler}>\n          <input type=\"file\" name=\"profilePicture\" />\n          <input type=\"text\" name=\"name\" placeholder=\"name\" />\n          <input type=\"text\" name=\"surname\" placeholder=\"surname\" />\n          <input type=\"text\" name=\"age\" placeholder=\"age\" />\n          <input type=\"text\" name=\"skiLevel\" placeholder=\"skiLevel\" />\n          <input type=\"text\" name=\"about\" placeholder=\"about\" />\n\n          <button type=\"submit\">submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport UpdateProfile from \"../components/UpdateProfile\";\n\nexport default class Profile extends React.Component {\n  render() {\n    let user = this.props.loggedinUser;\n    console.log(this.props, \"props from app.js\");\n    return (\n      <div>\n        {user.name && user.surname ? (\n          <div>\n            <h1>Hi {user.username} this is your profile</h1>\n            <h2>Name: {user.name}</h2>\n            <h2>surname: {user.surname}</h2>\n            <h2>Age: {user.age}</h2>\n            <h2>Ski Level: {user.skiLevel}</h2>\n            <h2>Total Tours: {user.tours.length}</h2>\n            <h2>Total gain: </h2>\n            <p>About: {user.about}</p>\n\n            {user.profilePicture ? (\n              <img\n                src={user.profilePicture}\n                alt=\"profile-foto\"\n                className=\"profile-foto\"\n              ></img>\n            ) : (\n              <img\n                src={user.profilePicture}\n                alt=\"profile-foto\"\n                className=\"profile-foto\"\n              ></img>\n            )}\n            <p>\n              <Link to=\"/update-profile\">Update Profile</Link>\n            </p>\n          </div>\n        ) : (\n          <UpdateProfile setUserState={this.props.setUserState} />\n        )}\n      </div>\n    );\n  }\n}\n","// import React from \"react\";\n// // in authservice abbiamo definito Axios e lo importiamo cosi\n// import { service } from \"../api/authService\";\n// import { Link } from \"react-router-dom\";\n\n// // per formattare la data e usarla poi nel backend per la query in Mongodb\n// function getDateFormat(date) {\n//   let year = date.getUTCFullYear();\n//   let month = date.getMonth() + 1;\n//   let day = date.getDate();\n\n//   let myDate = year + \"-\" + month + \"-\" + day;\n\n//   return myDate;\n// }\n\n// // array tour da usare sotto\n\n// export default class ToursList extends React.Component {\n//   toursArray = this.props.toursArray;\n//   state = {\n//     radioBtn: \"\"\n//   };\n\n//   // serve per creare la URL con il range di date e mandarlo nel backend\n//   getToursByDate = e => {\n//     let today = new Date();\n//     let todayDate = getDateFormat(today);\n//     let startDate;\n\n//     if (e.target.value === \"yesterday\") {\n//       today.setDate(today.getDate() - 1);\n//       startDate = getDateFormat(today);\n//     } else if (e.target.value === \"lastWeek\") {\n//       today.setDate(today.getDate() - 7);\n//       startDate = getDateFormat(today);\n//     } else if (e.target.value === \"lastMonth\") {\n//       today.setDate(today.getDate() - 30);\n//       getDateFormat(today);\n//     } else if (e.target.value === \"all\") {\n//       startDate = today = \"2019-01-01\";\n//     }\n\n//     console.log(todayDate, \"stratdate\");\n\n//     service\n//       .get(`/tours-by-date?today=${todayDate}&startDate=${startDate}`)\n//       .then(res => {\n//         console.log(res.data, \"date tours\");\n//         this.setState({\n//           tours: res.data.tours\n//         });\n//       })\n//       .catch(err => {\n//         console.log(err);\n//       });\n//   };\n\n//   // funzione per search bar based on mountain\n//   searchLocation = e => {\n//     let filteredArray = this.props.toursArray.filter(tour => {\n//       return tour.mountainId.location\n//         .toUpperCase()\n//         .includes(e.target.value.toUpperCase());\n//     });\n//     console.log(e.target.value);\n//     if (e.target.value === \"\") {\n//       this.setState({\n//         tours: this.toursArray\n//       });\n//     } else {\n//       this.setState({\n//         tours: filteredArray\n//       });\n//     }\n//   };\n\n//   // funzione per search bar based on RECOMENDED\n//   searchRecom = e => {\n//     let filteredArray = this.toursArray.filter(tour => {\n//       return tour.recomended\n//         .toUpperCase()\n//         .includes(e.target.value.toUpperCase());\n//     });\n//     console.log(e.target.value);\n//     if (e.target.value === \"\") {\n//       this.setState({\n//         radioBtn: \"\",\n//         tours: this.toursArray\n//       });\n//     } else {\n//       this.setState({\n//         radioBtn: e.target.value,\n//         tours: filteredArray\n//       });\n//     }\n//   };\n\n//   // funzione per search bar based on SNOW QUALITY\n//   searchSnow = e => {\n//     let filteredArray = this.toursArray.filter(tour => {\n//       return tour.snowQuality\n//         .toUpperCase()\n//         .includes(e.target.value.toUpperCase());\n//     });\n//     console.log(e.target.value);\n//     if (e.target.value === \"\") {\n//       this.setState({\n//         tours: this.toursArray\n//       });\n//     } else {\n//       this.setState({\n//         tours: filteredArray\n//       });\n//     }\n//   };\n\n//   // funzione per search bar based on DIFFICULTY\n//   searchDifficulty = e => {\n//     let filteredArray = this.toursArray.filter(tour => {\n//       return tour.mountainId.difficulty\n//         .toUpperCase()\n//         .includes(e.target.value.toUpperCase());\n//     });\n//     console.log(e.target.value);\n//     if (e.target.value === \"\") {\n//       this.setState({\n//         tours: this.toursArray\n//       });\n//     } else {\n//       this.setState({\n//         tours: filteredArray\n//       });\n//     }\n//   };\n\n//   // funzione per search bar based on DATE\n//   searchDate = e => {\n//     let filteredArray = this.toursArray.filter(tour => {\n//       return tour.date.includes(e.target.value);\n//     });\n//     console.log(e.target.value);\n//     if (e.target.value === \"\") {\n//       this.setState({\n//         tours: this.toursArray\n//       });\n//     } else {\n//       this.setState({\n//         tours: filteredArray\n//       });\n//     }\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <select name=\"Date\" onChange={this.getToursByDate}>\n//           <option value=\"all\">ALL</option>\n//           <option value=\"yesterday\">Yesterday</option>\n//           <option value=\"lastWeek\">Last week</option>\n//           <option value=\"lastMonth\">Last month</option>\n//         </select>\n\n//         <select\n//           type=\"text\"\n//           name=\"snowQuality\"\n//           placeholder=\"snow quality\"\n//           onChange={this.searchLocation}\n//         >\n//           <option value=\"\">ALL</option>\n//           <option value=\"Alpi Occidentali<\">Alpi Occidentali</option>\n//           <option value=\"Alpi Orientali\">Alpi Orientali</option>\n//           <option value=\"Alpi Retiche\">Alpi Retiche</option>\n//           <option value=\"Dolomiti\">Dolomiti</option>\n//           <option value=\"Alpi Giulie\">Alpi Giulie</option>\n//           <option value=\"Alpi Pennine\">Alpi Pennine</option>\n//           <option value=\"Alpi Apuane\">Alpi Apuane</option>\n//           <option value=\"Alpi Centrali\">Alpi Centrali</option>\n//         </select>\n\n//         <select\n//           type=\"text\"\n//           name=\"snowQuality\"\n//           placeholder=\"snow quality\"\n//           onChange={this.searchSnow}\n//         >\n//           <option value=\"\">ALL</option>\n//           <option value=\"powder\">Powder</option>\n//           <option value=\"crud\">Crud</option>\n//           <option value=\"crust\">Crust</option>\n//           <option value=\"slush\">Slush</option>\n//           <option value=\"ice\">Ice</option>\n//         </select>\n\n//         <select\n//           type=\"text\"\n//           name=\"snowQuality\"\n//           placeholder=\"snow quality\"\n//           onChange={this.searchDifficulty}\n//         >\n//           <option value=\"\">ALL</option>\n//           <option value=\"MS\">MS</option>\n//           <option value=\"MSA\">MSA</option>\n//           <option value=\"BS\">BS</option>\n//           <option value=\"BSA\">BSA</option>\n//           <option value=\"OS\">OS</option>\n//           <option value=\"OSA\">OSA</option>\n//         </select>\n\n//         <div>\n//           <td>\n//             <input\n//               type=\"radio\"\n//               name=\"Yes\"\n//               value=\"Yes\"\n//               checked={this.state.radioBtn === \"Yes\"}\n//               onChange={this.searchRecom}\n//             />\n//             YES\n//           </td>\n//           <td>\n//             <input\n//               type=\"radio\"\n//               name=\"No\"\n//               value=\"No\"\n//               checked={this.state.radioBtn === \"No\"}\n//               onChange={this.searchRecom}\n//             />\n//             NO\n//           </td>\n//           <td>\n//             <input\n//               type=\"radio\"\n//               name=\"\"\n//               value=\"\"\n//               checked={this.state.radioBtn === \"\"}\n//               onChange={this.searchRecom}\n//             />\n//             ALL\n//           </td>\n//         </div>\n\n//         {this.props.tours.map((tour, index) => {\n//           return (\n//             <div key={index}>\n//               <Link to={`/tour/${tour._id}`}>\n//                 <img\n//                   src={tour.picture[0]}\n//                   alt=\"mountain\"\n//                   className=\"mountain-foto\"\n//                 ></img>\n\n//                 <p>{tour.mountainId.mountainName}</p>\n//                 <p>{tour.mountainId.location}</p>\n//                 <p>{tour.mountainId.region}</p>\n//                 <p>Height: {tour.mountainId.height} mt</p>\n//                 <p>Elevation Gain: {tour.mountainId.elevationGain} mt</p>\n//                 <p>Difficulty: {tour.mountainId.difficulty}</p>\n//                 <p>\n//                   Snow Quality: {tour.snowQuality} - {tour.snowDepth} cm\n//                 </p>\n//               </Link>\n//             </div>\n//           );\n//         })}\n//       </div>\n//     );\n//   }\n// }\n\nimport React from \"react\";\n// in authservice abbiamo definito Axios e lo importiamo cosi\nimport { service } from \"../api/authService\";\nimport { Link } from \"react-router-dom\";\n\n// per formattare la data e usarla poi nel backend per la query in Mongodb\nfunction getDateFormat(date) {\n  let year = date.getUTCFullYear();\n  let month = date.getMonth() + 1;\n  let day = date.getDate();\n\n  let myDate = year + \"-\" + month + \"-\" + day;\n\n  return myDate;\n}\n\n// array tour da usare sotto\n\nexport default class ToursList extends React.Component {\n  state = {\n    radioBtn: \"\",\n    tours: this.props.tours,\n    toursTemp: []\n  };\n\n  // componentDidMount() {\n  //   console.log(this.props.tours, \"mounting\");\n  // }\n  // serve per creare la URL con il range di date e mandarlo nel backend\n  getToursByDate = e => {\n    let today = new Date();\n    let todayDate = getDateFormat(today);\n    let startDate;\n\n    if (e.target.value === \"yesterday\") {\n      today.setDate(today.getDate() - 1);\n      startDate = getDateFormat(today);\n    } else if (e.target.value === \"lastWeek\") {\n      today.setDate(today.getDate() - 7);\n      startDate = getDateFormat(today);\n    } else if (e.target.value === \"lastMonth\") {\n      today.setDate(today.getDate() - 30);\n      startDate = getDateFormat(today);\n      console.log(today, \"today\");\n    } else if (e.target.value === \"all\") {\n      startDate = today = \"2019-01-01\";\n    }\n\n    service\n      .get(`/tours-by-date?today=${todayDate}&startDate=${startDate}`)\n      .then(res => {\n        console.log(res.data, \"date tours\");\n        // this.setState({\n        //   tours: res.data.tours\n        // });\n        this.props.setToursState(res.data.tours);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  // funzione per search bar based on LOCATION\n  // searchLocation = e => {\n  //   let filteredArray = this.props.toursArray.filter(tour => {\n  //     return tour.mountainId.location\n  //       .toUpperCase()\n  //       .includes(e.target.value.toUpperCase());\n  //   });\n  //   console.log(e.target.value);\n  //   if (e.target.value === \"\") {\n  //     this.props.setToursState(this.props.toursArray);\n  //   } else {\n  //     this.props.setToursState(filteredArray);\n  //   }\n  // };\n  searchLocation = e => {\n    let filteredArray = this.props.tours.filter(tour => {\n      return tour.mountainId.location\n        .toUpperCase()\n        .includes(e.target.value.toUpperCase());\n    });\n    console.log(e.target.value);\n    if (e.target.value === \"\") {\n      this.props.setToursState(this.props.toursArray);\n    } else {\n      this.props.setToursState(filteredArray);\n    }\n  };\n\n  // funzione per search bar based on RECOMENDED\n  searchRecom = e => {\n    let filteredArray = this.props.toursArray.filter(tour => {\n      return tour.recomended\n        .toUpperCase()\n        .includes(e.target.value.toUpperCase());\n    });\n    console.log(e.target.value);\n    if (e.target.value === \"\") {\n      this.setState({\n        radioBtn: \"\",\n        tours: this.props.toursArray\n      });\n    } else {\n      this.setState({\n        radioBtn: e.target.value\n      });\n      this.props.setToursState(filteredArray);\n    }\n  };\n\n  // funzione per search bar based on SNOW QUALITY\n  // searchSnow = e => {\n  //   let filteredArray = this.props.toursArray.filter(tour => {\n  //     return tour.snowQuality\n  //       .toUpperCase()\n  //       .includes(e.target.value.toUpperCase());\n  //   });\n\n  //   if (e.target.value === \"\") {\n  //     this.props.setToursState(this.props.toursArray);\n  //   } else {\n  //     this.props.setToursState(filteredArray);\n  //     console.log(filteredArray, \"filtered array\");\n  //   }\n  // };\n  searchSnow = e => {\n    let filteredArray = this.props.tours.filter(tour => {\n      return tour.snowQuality\n        .toUpperCase()\n        .includes(e.target.value.toUpperCase());\n    });\n\n    if (e.target.value === \"\") {\n      this.props.setToursState(this.props.toursArray);\n    } else {\n      this.props.setToursState(filteredArray);\n      console.log(filteredArray, \"filtered array\");\n    }\n  };\n  // funzione per search bar based on DIFFICULTY\n  // searchDifficulty = e => {\n  //   let filteredArray = this.props.toursArray.filter(tour => {\n  //     return (\n  //       tour.mountainId.difficulty.toUpperCase() == e.target.value.toUpperCase()\n  //     );\n  //   });\n\n  //   if (e.target.value === \"\") {\n  //     this.props.setToursState(this.props.toursArray);\n  //   } else {\n  //     this.props.setToursState(filteredArray);\n  //     this.setState({\n  //       toursTemp: filteredArray\n  //     });\n  //   }\n  // };\n  searchDifficulty = e => {\n    let filteredArray = this.props.tours.filter(tour => {\n      return (\n        tour.mountainId.difficulty.toUpperCase() == e.target.value.toUpperCase()\n      );\n    });\n\n    if (e.target.value === \"\") {\n      this.props.setToursState(this.props.toursArray);\n    } else {\n      this.props.setToursState(filteredArray);\n      this.setState({\n        toursTemp: filteredArray\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <select name=\"Date\" onChange={this.getToursByDate}>\n          <option value=\"all\">ALL</option>\n          <option value=\"yesterday\">Yesterday</option>\n          <option value=\"lastWeek\">Last week</option>\n          <option value=\"lastMonth\">Last month</option>\n        </select>\n\n        <select\n          type=\"text\"\n          name=\"snowQuality\"\n          placeholder=\"snow quality\"\n          onChange={this.searchLocation}\n        >\n          <option value=\"\">ALL</option>\n          <option value=\"Alpi Occidentali<\">Alpi Occidentali</option>\n          <option value=\"Alpi Orientali\">Alpi Orientali</option>\n          <option value=\"Alpi Retiche\">Alpi Retiche</option>\n          <option value=\"Dolomiti\">Dolomiti</option>\n          <option value=\"Alpi Giulie\">Alpi Giulie</option>\n          <option value=\"Alpi Pennine\">Alpi Pennine</option>\n          <option value=\"Alpi Apuane\">Alpi Apuane</option>\n          <option value=\"Alpi Centrali\">Alpi Centrali</option>\n        </select>\n\n        <select\n          type=\"text\"\n          name=\"snowQuality\"\n          placeholder=\"snow quality\"\n          onChange={this.searchSnow}\n        >\n          <option value=\"\">ALL</option>\n          <option value=\"powder\">Powder</option>\n          <option value=\"crud\">Crud</option>\n          <option value=\"crust\">Crust</option>\n          <option value=\"slush\">Slush</option>\n          <option value=\"ice\">Ice</option>\n        </select>\n\n        <select\n          type=\"text\"\n          name=\"snowQuality\"\n          placeholder=\"snow quality\"\n          onChange={this.searchDifficulty}\n        >\n          <option value=\"\">ALL</option>\n          <option value=\"MS\">MS</option>\n          <option value=\"MSA\">MSA</option>\n          <option value=\"BS\">BS</option>\n          <option value=\"BSA\">BSA</option>\n          <option value=\"OS\">OS</option>\n          <option value=\"OSA\">OSA</option>\n        </select>\n\n        <div>\n          <td>\n            <input\n              type=\"radio\"\n              name=\"Yes\"\n              value=\"Yes\"\n              checked={this.state.radioBtn === \"Yes\"}\n              onChange={this.searchRecom}\n            />\n            YES\n          </td>\n          <td>\n            <input\n              type=\"radio\"\n              name=\"No\"\n              value=\"No\"\n              checked={this.state.radioBtn === \"No\"}\n              onChange={this.searchRecom}\n            />\n            NO\n          </td>\n          <td>\n            <input\n              type=\"radio\"\n              name=\"\"\n              value=\"\"\n              checked={this.state.radioBtn === \"\"}\n              onChange={this.searchRecom}\n            />\n            ALL\n          </td>\n        </div>\n\n        {this.props.tours.map((tour, index) => {\n          return (\n            <div key={index}>\n              <Link to={`/tour/${tour._id}`}>\n                <img\n                  src={tour.picture[0]}\n                  alt=\"mountain\"\n                  className=\"mountain-foto\"\n                ></img>\n\n                <p>{tour.mountainId.mountainName}</p>\n                <p>{tour.mountainId.location}</p>\n                <p>{tour.mountainId.region}</p>\n                <p>Height: {tour.mountainId.height} mt</p>\n                <p>Elevation Gain: {tour.mountainId.elevationGain} mt</p>\n                <p>Difficulty: {tour.mountainId.difficulty}</p>\n                <p>\n                  Snow Quality: {tour.snowQuality} - {tour.snowDepth} cm\n                </p>\n              </Link>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","// import React from \"react\";\n// // in authservice abbiamo definito Axios e lo importiamo cosi\n// import { service } from \"../api/authService\";\n// import { Link } from \"react-router-dom\";\n\n// // per formattare la data e usarla poi nel backend per la query in Mongodb\n// function getDateFormat(date) {\n//   let year = date.getUTCFullYear();\n//   let month = date.getMonth() + 1;\n//   let day = date.getDate();\n\n//   let myDate = year + \"-\" + month + \"-\" + day;\n\n//   return myDate;\n// }\n\n// // array tour da usare sotto\n// let toursArray = [];\n// export default class AllTours extends React.Component {\n//   state = {\n//     tours: [],\n//     radioBtn: \"\"\n//   };\n\n//   // serve per aggiornare lo state di tours e popolare l array\n//   componentDidMount() {\n//     service.get(\"/all-tours\").then(res => {\n//       toursArray = res.data.tours;\n//       this.setState({\n//         tours: res.data.tours\n//       });\n//     });\n//   }\n\n//   // serve per creare la URL con il range di date e mandarlo nel backend\n//   getToursByDate = e => {\n//     let today = new Date();\n//     let todayDate = getDateFormat(today);\n//     let startDate;\n\n//     if (e.target.value === \"yesterday\") {\n//       today.setDate(today.getDate() - 1);\n//       startDate = getDateFormat(today);\n//     } else if (e.target.value === \"lastWeek\") {\n//       today.setDate(today.getDate() - 7);\n//       startDate = getDateFormat(today);\n//     } else if (e.target.value === \"lastMonth\") {\n//       today.setDate(today.getDate() - 30);\n//       getDateFormat(today);\n//     } else if (e.target.value === \"all\") {\n//       startDate = today = \"2019-01-01\";\n//     }\n\n//     console.log(todayDate, \"stratdate\");\n\n//     service\n//       .get(`/tours-by-date?today=${todayDate}&startDate=${startDate}`)\n//       .then(res => {\n//         console.log(res.data, \"date tours\");\n//         this.setState({\n//           tours: res.data.tours\n//         });\n//       })\n//       .catch(err => {\n//         console.log(err);\n//       });\n//   };\n\n//   // funzione per search bar based on mountain\n//   searchLocation = e => {\n//     let filteredArray = toursArray.filter(tour => {\n//       return tour.mountainId.location\n//         .toUpperCase()\n//         .includes(e.target.value.toUpperCase());\n//     });\n//     console.log(e.target.value);\n//     if (e.target.value === \"\") {\n//       this.setState({\n//         tours: toursArray\n//       });\n//       console.log(\"empty vaue\");\n//       console.log(toursArray, \"toursArray\");\n//     } else {\n//       this.setState({\n//         tours: filteredArray\n//       });\n//     }\n//   };\n\n//   // funzione per search bar based on RECOMENDED\n//   searchRecom = e => {\n//     let filteredArray = toursArray.filter(tour => {\n//       return tour.recomended\n//         .toUpperCase()\n//         .includes(e.target.value.toUpperCase());\n//     });\n//     console.log(e.target.value);\n//     if (e.target.value === \"\") {\n//       this.setState({\n//         radioBtn: \"\",\n//         tours: toursArray\n//       });\n//       console.log(\"empty vaue\");\n//       console.log(toursArray, \"toursArray\");\n//     } else {\n//       this.setState({\n//         radioBtn: e.target.value,\n//         tours: filteredArray\n//       });\n//     }\n//   };\n\n//   // funzione per search bar based on SNOW QUALITY\n//   searchSnow = e => {\n//     let filteredArray = toursArray.filter(tour => {\n//       return tour.snowQuality\n//         .toUpperCase()\n//         .includes(e.target.value.toUpperCase());\n//     });\n//     console.log(e.target.value);\n//     if (e.target.value === \"\") {\n//       this.setState({\n//         tours: toursArray\n//       });\n//       console.log(\"empty vaue\");\n//       console.log(toursArray, \"toursArray\");\n//     } else {\n//       this.setState({\n//         tours: filteredArray\n//       });\n//     }\n//   };\n\n//   // funzione per search bar based on DIFFICULTY\n//   searchDifficulty = e => {\n//     let filteredArray = toursArray.filter(tour => {\n//       return (\n//         tour.mountainId.difficulty.toUpperCase() == e.target.value.toUpperCase()\n//       );\n//     });\n//     console.log(e.target.value);\n//     if (e.target.value === \"\") {\n//       this.setState({\n//         tours: toursArray\n//       });\n//       console.log(\"empty vaue\");\n//       console.log(toursArray, \"toursArray\");\n//     } else {\n//       this.setState({\n//         tours: filteredArray\n//       });\n//     }\n//   };\n\n//   // funzione per search bar based on DATE\n//   searchDate = e => {\n//     let filteredArray = toursArray.filter(tour => {\n//       return tour.date.includes(e.target.value);\n//     });\n//     console.log(e.target.value);\n//     if (e.target.value === \"\") {\n//       this.setState({\n//         tours: toursArray\n//       });\n//       console.log(\"empty vaue\");\n//       console.log(toursArray, \"toursArray\");\n//     } else {\n//       this.setState({\n//         tours: filteredArray\n//       });\n//     }\n//   };\n\n//   render() {\n//     console.log(toursArray, \"tours array\");\n//     return (\n//       <div>\n//         <h1>Hi {this.props.loggedinUser.username} find your tour</h1>\n\n//         <select name=\"Date\" onChange={this.getToursByDate}>\n//           <option value=\"all\">ALL</option>\n//           <option value=\"yesterday\">Yesterday</option>\n//           <option value=\"lastWeek\">Last week</option>\n//           <option value=\"lastMonth\">Last month</option>\n//         </select>\n\n//         <select\n//           type=\"text\"\n//           name=\"snowQuality\"\n//           placeholder=\"snow quality\"\n//           onChange={this.searchLocation}\n//         >\n//           <option value=\"\">ALL</option>\n//           <option value=\"Alpi Occidentali<\">Alpi Occidentali</option>\n//           <option value=\"Alpi Orientali\">Alpi Orientali</option>\n//           <option value=\"Alpi Retiche\">Alpi Retiche</option>\n//           <option value=\"Dolomiti\">Dolomiti</option>\n//           <option value=\"Alpi Giulie\">Alpi Giulie</option>\n//           <option value=\"Alpi Pennine\">Alpi Pennine</option>\n//           <option value=\"Alpi Apuane\">Alpi Apuane</option>\n//           <option value=\"Alpi Centrali\">Alpi Centrali</option>\n//         </select>\n\n//         <select\n//           type=\"text\"\n//           name=\"snowQuality\"\n//           placeholder=\"snow quality\"\n//           onChange={this.searchSnow}\n//         >\n//           <option value=\"\">ALL</option>\n//           <option value=\"powder\">Powder</option>\n//           <option value=\"crud\">Crud</option>\n//           <option value=\"crust\">Crust</option>\n//           <option value=\"slush\">Slush</option>\n//           <option value=\"ice\">Ice</option>\n//         </select>\n\n//         <select\n//           type=\"text\"\n//           name=\"snowQuality\"\n//           placeholder=\"snow quality\"\n//           onChange={this.searchDifficulty}\n//         >\n//           <option value=\"\">ALL</option>\n//           <option value=\"MS\">MS</option>\n//           <option value=\"MSA\">MSA</option>\n//           <option value=\"BS\">BS</option>\n//           <option value=\"BSA\">BSA</option>\n//           <option value=\"OS\">OS</option>\n//           <option value=\"OSA\">OSA</option>\n//         </select>\n\n//         <div>\n//           <td>\n//             <input\n//               type=\"radio\"\n//               name=\"Yes\"\n//               value=\"Yes\"\n//               checked={this.state.radioBtn === \"Yes\"}\n//               onChange={this.searchRecom}\n//             />\n//             YES\n//           </td>\n//           <td>\n//             <input\n//               type=\"radio\"\n//               name=\"No\"\n//               value=\"No\"\n//               checked={this.state.radioBtn === \"No\"}\n//               onChange={this.searchRecom}\n//             />\n//             NO\n//           </td>\n//           <td>\n//             <input\n//               type=\"radio\"\n//               name=\"\"\n//               value=\"\"\n//               checked={this.state.radioBtn === \"\"}\n//               onChange={this.searchRecom}\n//             />\n//             ALL\n//           </td>\n//         </div>\n\n//         {this.state.tours.map((tour, index) => {\n//           return (\n//             <div key={index}>\n//               <Link to={`/tour/${tour._id}`}>\n//                 <img\n//                   src={tour.picture}\n//                   alt=\"mountain\"\n//                   className=\"mountain-foto\"\n//                 ></img>\n\n//                 <p>{tour.mountainId.mountainName}</p>\n//                 <p>{tour.mountainId.location}</p>\n//                 <p>{tour.mountainId.region}</p>\n//                 <p>Height: {tour.mountainId.height} mt</p>\n//                 <p>Elevation Gain: {tour.mountainId.elevationGain} mt</p>\n//                 <p>Difficulty: {tour.mountainId.difficulty}</p>\n//                 <p>\n//                   Snow Quality: {tour.snowQuality} - {tour.snowDepth} cm\n//                 </p>\n//               </Link>\n//             </div>\n//           );\n//         })}\n//       </div>\n//     );\n//   }\n// }\n\nimport React from \"react\";\n// in authservice abbiamo definito Axios e lo importiamo cosi\nimport { service } from \"../api/authService\";\nimport { Link } from \"react-router-dom\";\nimport ToursList from \"../components/ToursList\";\n\n// array tour da usare sotto\nlet toursArray = [];\nexport default class AllTours extends React.Component {\n  state = {\n    tours: []\n  };\n\n  // serve per aggiornare lo state di tours e popolare l array\n  componentDidMount() {\n    service.get(\"/all-tours\").then(res => {\n      toursArray = res.data.tours;\n      this.setState({\n        tours: res.data.tours\n      });\n    });\n  }\n\n  setToursState = tours => {\n    this.setState({\n      tours: tours\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Hi {this.props.loggedinUser.username} find your tour</h1>\n        <ToursList\n          tours={this.state.tours}\n          toursArray={toursArray}\n          setToursState={this.setToursState}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n// in authservice abbiamo definito Axios e lo importiamo cosi\nimport { service } from \"../api/authService\";\nimport { Link } from \"react-router-dom\";\nimport ToursList from \"../components/ToursList\";\n\n// array tour da usare sotto\nlet toursArray = [];\nexport default class AllTours extends React.Component {\n  state = {\n    tours: []\n  };\n\n  // serve per aggiornare lo state di tours e popolare l array\n  componentDidMount() {\n    service.get(\"/your-tours\").then(res => {\n      toursArray = res.data.tours;\n      this.setState({\n        tours: res.data.tours\n      });\n    });\n  }\n\n  render() {\n    console.log(toursArray, \"tours array\");\n    return (\n      <div>\n        <h1>Hi {this.props.loggedinUser.username} find your tour</h1>\n        <ToursList tours={this.state.tours} toursArray={toursArray} />\n      </div>\n    );\n  }\n}\n","import Autosuggest from \"react-autosuggest\";\nimport React from \"react\";\n\n// in authservice abbiamo definito Axios e lo importiamo cosi\nimport { service } from \"../api/authService\";\n\nexport default class Auto extends React.Component {\n  // Autosuggest is a controlled component.\n  // This means that you need to provide an input value\n  // and an onChange handler that updates this value (see below).\n  // Suggestions also need to be provided to the Autosuggest,\n  // and they are initially empty because the Autosuggest is closed.\n  state = {\n    value: \"\",\n    suggestions: [],\n    // array montagne da popolare dal database mongodb\n    mountains: []\n  };\n\n  // serve per aggiornare lo state di mountains e popolare l array\n  componentDidMount() {\n    service\n      .get(\"/mountains\")\n      .then(res => this.setState({ mountains: res.data.mountains }));\n  }\n  // Teach Autosuggest how to calculate suggestions for any given input value.\n  getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    return inputLength === 0\n      ? []\n      : this.state.mountains.filter(\n          mountain =>\n            mountain.mountainName.toLowerCase().slice(0, inputLength) ===\n            inputValue\n        );\n  };\n\n  // When suggestion is clicked, Autosuggest needs to populate the input\n  // based on the clicked suggestion. Teach Autosuggest how to calculate the\n  // input value for every given suggestion.\n  getSuggestionValue = suggestion => suggestion.mountainName;\n\n  // Use your imagination to render suggestions.\n  renderSuggestion = suggestion => <div>{suggestion.mountainName}</div>;\n\n  onChange = (event, { newValue }) => {\n    let myMountainId = \"\";\n\n    let myMountain = this.state.mountains.filter(mountain => {\n      return mountain.mountainName.includes(newValue);\n    });\n\n    if (myMountain.length > 0) {\n      myMountainId = myMountain[0]._id;\n      console.log(\"la montagna c e\");\n    } else {\n      console.log(\"array vuota\");\n      myMountainId = \"\";\n    }\n\n    this.setState({\n      value: newValue\n    });\n    // lift value up to CreateTour component\n    this.props.setValue(newValue, myMountainId);\n\n    // dobboamo mettere [0] perche .filter (come .map) ritornano sempre un array, anche se contiene un solo elemento\n    // console.log(myMountain[0]._id, \"id\");\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: this.getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: \"mountain\",\n      value,\n      onChange: this.onChange\n    };\n\n    // Finally, render it!\n    // aggiunto this. perche abbiamo spostato all interno del component la logica getSuggestion e renderSuggestion\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={this.getSuggestionValue}\n        renderSuggestion={this.renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\n// ORIGINALE //\n\n// import Autosuggest from \"react-autosuggest\";\n// import React from \"react\";\n// import axios from \"axios\";\n\n// const service = axios.create({\n//   baseURL: process.env.REACT_APP_BASE_URL,\n//   withCredentials: true\n// });\n\n// // Imagine you have a list of languages that you'd like to autosuggest.\n// const languages = [\n//   {\n//     name: \"Curo\",\n//     height: 3300,\n//     area: \"Alpi Orobie\"\n//   },\n//   {\n//     name: \"Elm\",\n//     year: 2012\n//   },\n\n//   {\n//     name: \"Elmo\",\n//     year: 2012\n//   },\n\n//   {\n//     name: \"Elsa\",\n//     year: 2012\n//   },\n\n//   {\n//     name: \"Eletrre\",\n//     year: 2012\n//   }\n// ];\n\n// // Teach Autosuggest how to calculate suggestions for any given input value.\n// const getSuggestions = value => {\n//   const inputValue = value.trim().toLowerCase();\n//   const inputLength = inputValue.length;\n\n//   return inputLength === 0\n//     ? []\n//     : languages.filter(\n//         lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue\n//       );\n// };\n\n// // When suggestion is clicked, Autosuggest needs to populate the input\n// // based on the clicked suggestion. Teach Autosuggest how to calculate the\n// // input value for every given suggestion.\n// const getSuggestionValue = suggestion => suggestion.name;\n\n// // Use your imagination to render suggestions.\n// const renderSuggestion = suggestion => <div>{suggestion.name}</div>;\n\n// export default class Auto extends React.Component {\n//   constructor() {\n//     super();\n\n//     // Autosuggest is a controlled component.\n//     // This means that you need to provide an input value\n//     // and an onChange handler that updates this value (see below).\n//     // Suggestions also need to be provided to the Autosuggest,\n//     // and they are initially empty because the Autosuggest is closed.\n//     this.state = {\n//       value: \"\",\n//       suggestions: []\n//     };\n//   }\n\n//   onChange = (event, { newValue }) => {\n//     this.setState({\n//       value: newValue\n//     });\n//     // lift value up to CreateTour component\n//     this.props.setValue(newValue);\n//   };\n\n//   // Autosuggest will call this function every time you need to update suggestions.\n//   // You already implemented this logic above, so just use it.\n//   onSuggestionsFetchRequested = ({ value }) => {\n//     this.setState({\n//       suggestions: getSuggestions(value)\n//     });\n//   };\n\n//   // Autosuggest will call this function every time you need to clear suggestions.\n//   onSuggestionsClearRequested = () => {\n//     this.setState({\n//       suggestions: []\n//     });\n//   };\n\n//   render() {\n//     const { value, suggestions } = this.state;\n\n//     // Autosuggest will pass through all these props to the input.\n//     const inputProps = {\n//       placeholder: \"mountain\",\n//       value,\n//       onChange: this.onChange\n//     };\n\n//     // Finally, render it!\n//     return (\n//       <Autosuggest\n//         suggestions={suggestions}\n//         onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n//         onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n//         getSuggestionValue={getSuggestionValue}\n//         renderSuggestion={renderSuggestion}\n//         inputProps={inputProps}\n//       />\n//     );\n//   }\n// }\n","import React from \"react\";\nimport { createTour } from \"../api/userService\";\nimport Auto from \"../components/AutoSuggest\";\n\nexport default class CreateTour extends React.Component {\n  state = {\n    mountainName: \"\",\n    mountainId: \"\"\n  };\n\n  // parte del form ref per upload foto\n  formRef = React.createRef();\n\n  setValue = (value, id) => {\n    this.setState({\n      mountainName: value,\n      mountainId: id\n    });\n  };\n\n  onChangeHandler = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  submitHandler = e => {\n    e.preventDefault();\n    // formData per passare la foto nel req.file (req.body e' solo testo)\n    const formData = new FormData(this.formRef.current);\n    // createTour(this.state, formData)\n    createTour(formData)\n      .then(res => {\n        console.log(this.state.mountainId);\n        this.props.history.push(\"/your-tours\");\n      })\n      .catch(res => {\n        debugger;\n        this.setState({\n          errorMessage: res.response.data.errorMessage\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>this is the Create-Tour page</h1>\n        <form ref={this.formRef} onSubmit={this.submitHandler}>\n          <input type=\"file\" name=\"picture\" multiple />\n          <input type=\"date\" name=\"date\" />\n\n          <Auto type=\"text\" name=\"mountainName\" setValue={this.setValue} />\n\n          {/* input hidden creto per poter passare mountainId al server tramite req.body, extrastep fatto per poter passare anche la foto, che non e' parte dello this.state */}\n\n          <input\n            type=\"hidden\"\n            name=\"mountainId\"\n            value={this.state.mountainId}\n          />\n\n          <select type=\"text\" name=\"snowQuality\" placeholder=\"snowQuality\">\n            <option value=\"powder\">Powder</option>\n            <option value=\"crud\">Crud</option>\n            <option value=\"crust\">Crust</option>\n            <option value=\"slush\">Slush</option>\n            <option value=\"ice\">Ice</option>\n          </select>\n\n          <select type=\"number\" name=\"snowDepth\" placeholder=\"snowDepth\">\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"15\">15</option>\n            <option value=\"20\">20</option>\n            <option value=\"25\">25</option>\n            <option value=\"30\">30</option>\n            <option value=\"35\">35</option>\n            <option value=\"40\">40</option>\n            <option value=\"45\">45</option>\n            <option value=\"50\">50</option>\n          </select>\n\n          <select type=\"text\" name=\"recomended\" placeholder=\"recomended\">\n            <option value=\"Yes\">Yes</option>\n            <option value=\"No\">No</option>\n          </select>\n\n          <input type=\"text\" name=\"description\" placeholder=\"description\" />\n\n          <button type=\"submit\">submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { logout } from \"../api/authService\";\n\nexport default class NavBar extends React.Component {\n  logoutHandler = () => {\n    try {\n      logout();\n\n      this.props.setUserState(null);\n      this.props.history.push(\"/\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  render() {\n    return (\n      <nav>\n        {this.props.loggedinUser ? (\n          <div>\n            <h1>hello {this.props.loggedinUser.username} welcome on SKIALP</h1>\n            <p>\n              <Link to=\"/your-tours\">Your Tours</Link>\n            </p>\n            <p>\n              <Link to=\"/create-tour\">Create Tour</Link>\n            </p>\n            <p>\n              <Link to=\"/all-tours\">All Tours</Link>\n            </p>\n            <p>\n              <Link to=\"/profile\">Profile</Link>\n            </p>\n\n            <p>\n              <Link to=\"/\" onClick={this.logoutHandler}>\n                Logout\n              </Link>\n            </p>\n          </div>\n        ) : (\n          <div>\n            <h1>SKIALP</h1>\n            <p>\n              <Link to=\"/\">Home</Link>\n            </p>\n            <p>\n              <Link to=\"/login\">Login</Link>\n            </p>\n          </div>\n        )}\n      </nav>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport { Carousel } from \"react-responsive-carousel\";\n\nclass DemoCarousel extends Component {\n  render() {\n    return (\n      <Carousel>\n        {this.props.pictures.map((foto, index) => {\n          return (\n            <div>\n              <img src={foto} />\n            </div>\n          );\n        })}\n      </Carousel>\n    );\n  }\n}\n\n// ReactDOM.render(<DemoCarousel />, document.querySelector('.demo-carousel'));\n\nexport default DemoCarousel;\n","import React from \"react\";\n// in authservice abbiamo definito Axios e lo importiamo cosi\nimport { service } from \"../api/authService\";\nimport DemoCarousel from \"../components/DemoCarousel\";\n\nexport default class Tour extends React.Component {\n  state = {\n    tour: null,\n    message: null,\n    tourId: null\n  };\n\n  // funzione creata per poter fare il reload del tour dopo l aggiunta dei commenti, quindi lo richiamiamo su submithandler ma anche in component didmount che viene chiamato per primo dala DOM\n  getTour = () => {\n    const id = this.props.match.params.id;\n\n    service.get(`/tour/${id}`).then(res => {\n      console.log(res);\n      this.setState({\n        tour: res.data.tour,\n        tourId: res.data.tour._id\n      });\n    });\n  };\n  componentDidMount() {\n    this.getTour();\n  }\n\n  onChangeHandler = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  submitHandler = e => {\n    const comment = { message: this.state.message, tourId: this.state.tourId };\n    e.preventDefault();\n    console.log(this.state.message);\n    service\n      // comments e' l oggetto che passiamo sulla rout create-comments\n      .post(\"/create-comment\", comment)\n      .then(res => {\n        this.getTour();\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  render() {\n    let tour = this.state.tour;\n\n    return (\n      <div>\n        <div>\n          {\" \"}\n          {tour ? (\n            <div>\n              <DemoCarousel pictures={tour.picture} />\n\n              <p>{tour.mountainId.mountainName}</p>\n              <p>{tour.mountainId.location}</p>\n              <p>{tour.mountainId.region}</p>\n              <p>Height: {tour.mountainId.height} mt</p>\n              <p>Elevation Gain: {tour.mountainId.elevationGain} mt</p>\n              <p>Difficulty: {tour.mountainId.difficulty}</p>\n              <p>\n                <a href={tour.mountainId.link} target=\"_blank\">\n                  Tour Details\n                </a>\n              </p>\n              <p>\n                <a href=\"https://www.aineva.it/bollettini/#top\" target=\"_blank\">\n                  AINEVA\n                </a>\n              </p>\n              <p>\n                Snow Quality: {tour.snowQuality} - {tour.snowDepth} cm\n              </p>\n              <p>Description: {tour.description}</p>\n              <div>\n                {this.state.tour.comments.map((tour, index) => {\n                  return (\n                    <div key={index}>\n                      <p>Created by {tour.username}</p>\n                      <p>{tour.message}</p>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          ) : (\n            <p>loading Tour</p>\n          )}\n        </div>\n        <form onSubmit={this.submitHandler}>\n          <textarea\n            type=\"text\"\n            name=\"message\"\n            placeholder=\"message\"\n            onChange={this.onChangeHandler}\n          />\n          <button type=\"submit\">submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Switch, Route } from \"react-router-dom\";\nimport SignUp from \"./pages/SignUp\";\nimport Login from \"./pages/Login\";\nimport { isLoggedIn } from \"./api/authService\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport Profile from \"./pages/Profile\";\nimport AllTours from \"./pages/AllTours\";\nimport YourTours from \"./pages/YourTours\";\nimport CreateTour from \"./pages/CreateTour\";\nimport NavBar from \"./components/NavBar\";\nimport UpdateProfile from \"./components/UpdateProfile\";\nimport Tour from \"./pages/Tour\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loggedinUser: null,\n\n      err: null\n    };\n  }\n\n  setUserState = user => {\n    // If user is loggedIn state will be set with user,\n    // otherwise user will be null.\n    // App.js setState()\n    this.setState({\n      loggedinUser: user\n    });\n  };\n\n  componentDidMount = async () => {\n    try {\n      const currentUser = await isLoggedIn();\n      this.setState({\n        loggedinUser: currentUser\n      });\n    } catch (err) {\n      this.setState({\n        loggedinUser: null\n      });\n    }\n  };\n\n  render() {\n    console.log(this.state.loggedinUser, \"da app.js\");\n    return (\n      <div className=\"App\">\n        <NavBar\n          loggedinUser={this.state.loggedinUser}\n          setUserState={this.setUserState}\n        />\n\n        <p></p>\n\n        <Switch>\n          <Route path=\"/signup\" component={SignUp}></Route>\n          <Route\n            path=\"/login\"\n            render={props => (\n              <Login {...props} setUserState={this.setUserState} />\n            )}\n          />\n\n          <PrivateRoute\n            path=\"/profile\"\n            loggedinUser={this.state.loggedinUser}\n            setUserState={this.setUserState}\n            component={Profile}\n          />\n\n          <PrivateRoute\n            path=\"/update-profile\"\n            loggedinUser={this.state.loggedinUser}\n            setUserState={this.setUserState}\n            component={UpdateProfile}\n          />\n\n          <PrivateRoute\n            path=\"/all-tours\"\n            loggedinUser={this.state.loggedinUser}\n            component={AllTours}\n          />\n          <PrivateRoute\n            path=\"/your-tours\"\n            loggedinUser={this.state.loggedinUser}\n            component={YourTours}\n          />\n          <PrivateRoute\n            path=\"/create-tour\"\n            loggedinUser={this.state.loggedinUser}\n            component={CreateTour}\n          />\n\n          <PrivateRoute\n            path=\"/tour/:id\"\n            loggedinUser={this.state.loggedinUser}\n            component={Tour}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}