{"version":3,"sources":["backvideo.mp4","api/authService.js","pages/SignUp.js","pages/Login.js","components/PrivateRoute.js","api/userService.js","components/UpdateProfile.js","pages/Profile.js","components/ToursList.js","pages/AllTours.js","pages/YourTours.js","components/AutoSuggest.js","pages/CreateTour.js","components/NavBar.js","components/DemoCarousel.js","pages/Tour.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","service","axios","create","baseURL","process","withCredentials","signup","user","post","loginAPI","a","data","console","log","isLoggedIn","get","logout","SignUp","state","username","password","errorMessage","onChangeHandler","e","target","name","value","setState","submitHandler","preventDefault","then","res","props","history","push","catch","response","className","onSubmit","this","type","placeholder","onChange","to","React","Component","Login","setUserState","currentUser","protectedRoute","component","loggedinUser","rest","render","createTour","tour","createProfile","profile","UpdateProfile","formRef","createRef","formData","FormData","current","err","ref","style","width","margin","Profile","surname","marginTop","age","skiLevel","tours","length","about","profilePicture","src","alt","getDateFormat","date","getUTCFullYear","getMonth","getDate","ToursList","location","difficulty","todayDate","startDate","snowQuality","recomended","getToursByDate","today","Date","setDate","getTours","userTours","pathname","setToursState","handleFilterChange","padding","map","index","key","picture","mountainId","mountainName","region","height","elevationGain","snowDepth","_id","AllTours","YourTours","Auto","suggestions","mountains","getSuggestions","inputValue","trim","toLowerCase","inputLength","filter","mountain","slice","getSuggestionValue","suggestion","renderSuggestion","event","newValue","myMountainId","myMountain","includes","setValue","onSuggestionsFetchRequested","onSuggestionsClearRequested","inputProps","CreateTour","id","multiple","borderRadius","boxShadow","border","NavBar","logoutHandler","classNaem","onClick","color","display","marginRight","DemoCarousel","pictures","foto","Tour","message","tourId","getTour","match","params","comment","error","description","comments","position","top","App","componentDidMount","isLoading","autoPlay","muted","loop","Video","path","PrivateRoute","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9bd2793.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/backvideo.55b7cd70.mp4\";","import axios from \"axios\";\n\nexport const service = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  withCredentials: true\n});\n\nexport const signup = user => {\n  return service.post(\"auth/signup\", user);\n};\n\n// vedi auth.js riga 75\nexport const loginAPI = async user => {\n  try {\n    const { data } = await service.post(\"/auth/login\", user);\n\n    return data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const isLoggedIn = async () => {\n  try {\n    const { data } = await service.get(\"/auth/isLoggedIn\");\n\n    return data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const logout = async () => {\n  try {\n    const { data } = await service.get(\"/auth/logout\");\n\n    return data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n","import React from \"react\";\nimport { signup } from \"../api/authService\";\nimport { Link } from \"react-router-dom\";\n\nexport default class SignUp extends React.Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    errorMessage: null\n  };\n\n  onChangeHandler = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  submitHandler = e => {\n    e.preventDefault();\n    signup(this.state)\n      .then(res => {\n        console.log(res);\n        this.props.history.push(\"/Login\");\n      })\n      .catch(res => {\n        this.setState({\n          errorMessage: res.response.data.errorMessage\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"login\">\n        <h1>Create your account</h1>\n        <form onSubmit={this.submitHandler} className=\"form\">\n          <input\n            type=\"text\"\n            name=\"username\"\n            placeholder=\"username\"\n            onChange={this.onChangeHandler}\n          />\n          <input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            onChange={this.onChangeHandler}\n          />\n          <button className=\"btn\" type=\"submit\">\n            submit\n          </button>\n          <p>\n            Already have a login?\n            <Link to=\"/login\"> Login </Link>\n          </p>\n        </form>\n        <p>\n          {this.state.errorMessage ? (\n            <p className=\"error-message\">{this.state.errorMessage}</p>\n          ) : (\n            <p></p>\n          )}\n        </p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { loginAPI } from \"../api/authService\";\nimport { Link } from \"react-router-dom\";\n\nexport default class Login extends React.Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    errorMessage: null\n  };\n\n  onChangeHandler = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  submitHandler = async e => {\n    e.preventDefault();\n    try {\n      const user = await loginAPI(this.state);\n\n      this.props.setUserState(user.currentUser);\n\n      this.props.history.push(\"/your-tours\");\n    } catch (err) {\n      this.setState({\n        errorMessage: this.props.errorMessage\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"login\">\n        <h1>Login to your account</h1>\n        <form onSubmit={this.submitHandler} className=\"form\">\n          <input\n            type=\"text\"\n            name=\"username\"\n            placeholder=\"username\"\n            onChange={this.onChangeHandler}\n          />\n\n          <input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            onChange={this.onChangeHandler}\n          />\n          <button className=\"btn\" type=\"submit\">\n            submit\n          </button>\n          <p>\n            You don't have an account?\n            <Link to=\"/signup\"> Signup</Link>\n          </p>\n        </form>\n        <p>\n          {this.state.errorMessage ? (\n            <p className=\"error-message\">{this.state.errorMessage}</p>\n          ) : (\n            <p></p>\n          )}\n        </p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\n// the private route is a function that will return a Route component or Redirect.\n// that expects a component, an user an other props.\n// the other props will be set in ...rest (the most important one will be the path definition (the path we see in the browser's navigation))\nconst protectedRoute = ({ component: Component, loggedinUser, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={props => {\n        //render is a function that checks if the user is passed a long. If not the private route will redirect to \"/\"\n        if (loggedinUser) {\n          // we added  {...res} to pass from App.js the props+the function to the components <UpdateProfile> and <Profile>\n          return <Component {...props} {...rest} loggedinUser={loggedinUser} />;\n        } else {\n          return <Redirect to=\"/\" />;\n        }\n      }}\n    />\n  );\n};\n\nexport default protectedRoute;\n","import axios from \"axios\";\n\nconst service = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  withCredentials: true\n});\n\nexport const createTour = async tour => {\n  try {\n    const { data } = await service.post(\"/create-tour\", tour);\n\n    return data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const createProfile = async profile => {\n  try {\n    const { data } = await service.post(\"/profile\", profile);\n\n    return data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n","import React from \"react\";\nimport { createProfile } from \"../api/userService\";\n\nexport default class UpdateProfile extends React.Component {\n  formRef = React.createRef();\n\n  submitHandler = e => {\n    e.preventDefault();\n\n    // formData per passare la foto nel req.file (req.body e' solo testo)\n    const formData = new FormData(this.formRef.current);\n    // createTour(this.state, formData)\n    createProfile(formData)\n      .then(res => {\n        console.log(res);\n        this.props.setUserState(res);\n        this.props.history.push(\"/profile\");\n      })\n      .catch(err => {\n        console.log(err);\n        // this.setState({\n        //   errorMessage: res.response.data.errorMessage\n        // });\n      });\n  };\n\n  render() {\n    console.log(this.props, \"vedi props\");\n    return (\n      <div className=\"update-profile\">\n        {/* <h1>Hi {this.props.username} update your profile</h1> */}\n        <h1>Profile update</h1>\n\n        <form ref={this.formRef} onSubmit={this.submitHandler}>\n          <input type=\"file\" name=\"profilePicture\" />\n          <input type=\"text\" name=\"name\" placeholder=\"name\" />\n          <input type=\"text\" name=\"surname\" placeholder=\"surname\" />\n          <input type=\"text\" name=\"age\" placeholder=\"age\" />\n          <input type=\"text\" name=\"skiLevel\" placeholder=\"skiLevel\" />\n          <input type=\"text\" name=\"about\" placeholder=\"about\" />\n\n          <div style={{ width: \"500px\", margin: \"0 auto\" }}>\n            <button className=\"btn\" type=\"submit\">\n              submit\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport UpdateProfile from \"../components/UpdateProfile\";\n\nexport default class Profile extends React.Component {\n  render() {\n    let user = this.props.loggedinUser;\n    console.log(this.props, \"props from app.js\");\n    return (\n      <div>\n        {user.name && user.surname ? (\n          <div className=\"profile-section\">\n            <div>\n              <h1 style={{ marginTop: \"20px\" }}>\n                Welcome back {user.username}\n              </h1>\n              <p>\n                <strong>Name:</strong> {user.name}\n              </p>\n              <p>\n                <strong>Surname:</strong> {user.surname}\n              </p>\n              <p>\n                <strong>Age: </strong>\n                {user.age}\n              </p>\n              <p>\n                <strong>Ski Level:</strong> {user.skiLevel}\n              </p>\n              {user.tours && (\n                <p>\n                  <strong>Total Tours:</strong> {user.tours.length}\n                </p>\n              )}\n              <p>\n                <strong>Total gain:</strong>{\" \"}\n              </p>\n              <p>\n                <strong>About: </strong>\n                {user.about}\n              </p>\n              <p style={{ marginTop: \"40px\" }}>\n                <Link className=\"btn\" to=\"/update-profile\">\n                  Update Profile\n                </Link>\n              </p>\n            </div>\n            <div>\n              {user.profilePicture ? (\n                <img\n                  src={user.profilePicture}\n                  alt=\"profile-foto\"\n                  className=\"profile-foto\"\n                ></img>\n              ) : (\n                <img\n                  src={user.profilePicture}\n                  alt=\"profile-foto\"\n                  className=\"profile-foto\"\n                ></img>\n              )}\n            </div>\n          </div>\n        ) : (\n          <UpdateProfile setUserState={this.props.setUserState} />\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n// in authservice abbiamo definito Axios e lo importiamo cosi\nimport { service } from \"../api/authService\";\nimport { Link } from \"react-router-dom\";\nimport { relative } from \"path\";\n\n// per formattare la data e usarla poi nel backend per la query in Mongodb\nfunction getDateFormat(date) {\n  let year = date.getUTCFullYear();\n  let month = date.getMonth() + 1;\n  let day = date.getDate();\n\n  let myDate = year + \"-\" + month + \"-\" + day;\n\n  return myDate;\n}\n\nexport default class ToursList extends React.Component {\n  state = {\n    location: \"\",\n    difficulty: \"\",\n    todayDate: \"\",\n    startDate: \"\",\n    snowQuality: \"\",\n    recomended: \"\"\n  };\n\n  // serve per creare la URL con il range di date e mandarlo nel backend\n  getToursByDate = e => {\n    let today = new Date();\n    let todayDate = getDateFormat(today);\n    let startDate;\n\n    if (e.target.value === \"yesterday\") {\n      today.setDate(today.getDate() - 1);\n      startDate = getDateFormat(today);\n    } else if (e.target.value === \"lastWeek\") {\n      today.setDate(today.getDate() - 7);\n      startDate = getDateFormat(today);\n    } else if (e.target.value === \"lastMonth\") {\n      today.setDate(today.getDate() - 30);\n      startDate = getDateFormat(today);\n      console.log(today, \"today\");\n    } else if (e.target.value === \"all\") {\n      startDate = today = \"\";\n    }\n    this.setState({ todayDate, startDate }, () => this.getTours());\n  };\n\n  getTours = () => {\n    const {\n      location,\n      difficulty,\n      todayDate,\n      startDate,\n      snowQuality,\n      recomended\n    } = this.state;\n\n    const userTours =\n      this.props.history.location.pathname === \"/your-tours\" ? true : false;\n\n    service\n      .get(\n        `/tours-by-date?todayDate=${todayDate}&startDate=${startDate}&location=${location}&difficulty=${difficulty}&snowQuality=${snowQuality}&recomended=${recomended}&userTours=${userTours}`\n      )\n      .then(res => {\n        console.log(res.data, \"date tours\");\n\n        this.props.setToursState(res.data.tours);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  handleFilterChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value }, () => {\n      this.getTours();\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div style={{ padding: \"5px 20px\" }} className=\"flex-container\">\n          <p>\n            <strong>Date</strong>\n          </p>\n          <select\n            name=\"Date\"\n            onChange={this.getToursByDate}\n            className=\"custom-select\"\n          >\n            <option value=\"all\">ALL</option>\n            <option value=\"yesterday\">Yesterday</option>\n            <option value=\"lastWeek\">Last week</option>\n            <option value=\"lastMonth\">Last month</option>\n          </select>\n          <p>\n            <strong>Location</strong>\n          </p>\n          <select\n            type=\"text\"\n            name=\"location\"\n            placeholder=\"snow quality\"\n            onChange={this.handleFilterChange}\n            className=\"custom-select\"\n          >\n            <option value=\"\">ALL</option>\n            <option value=\"Alpi Occidentali<\">Alpi Occidentali</option>\n            <option value=\"Alpi Orientali\">Alpi Orientali</option>\n            <option value=\"Alpi Retiche\">Alpi Retiche</option>\n            <option value=\"Dolomiti\">Dolomiti</option>\n            <option value=\"Alpi Giulie\">Alpi Giulie</option>\n            <option value=\"Alpi Pennine\">Alpi Pennine</option>\n            <option value=\"Alpi Apuane\">Alpi Apuane</option>\n            <option value=\"Alpi Centrali\">Alpi Centrali</option>\n          </select>\n          <p>\n            <strong>Snow</strong>\n          </p>\n          <select\n            type=\"text\"\n            name=\"snowQuality\"\n            placeholder=\"snow quality\"\n            onChange={this.handleFilterChange}\n            className=\"custom-select\"\n          >\n            <option value=\"\">ALL</option>\n            <option value=\"powder\">Powder</option>\n            <option value=\"crud\">Crud</option>\n            <option value=\"crust\">Crust</option>\n            <option value=\"slush\">Slush</option>\n            <option value=\"ice\">Ice</option>\n          </select>\n          <p>\n            <strong>Level</strong>\n          </p>\n          <select\n            type=\"text\"\n            name=\"difficulty\"\n            placeholder=\"snow quality\"\n            onChange={this.handleFilterChange}\n            className=\"custom-select\"\n          >\n            <option value=\"\">ALL</option>\n            <option value=\"MS\">MS</option>\n            <option value=\"MSA\">MSA</option>\n            <option value=\"BS\">BS</option>\n            <option value=\"BSA\">BSA</option>\n            <option value=\"OS\">OS</option>\n            <option value=\"OSA\">OSA</option>\n          </select>\n          <p>\n            <strong>Recomended</strong>\n          </p>\n          <select\n            type=\"text\"\n            name=\"recomended\"\n            placeholder=\"recomended\"\n            onChange={this.handleFilterChange}\n            className=\"custom-select\"\n          >\n            <option value=\"\">ALL</option>\n            <option value=\"yes\">YES</option>\n            <option value=\"no\">NO</option>\n          </select>\n        </div>\n        <div className=\"cart-container\">\n          {this.props.tours.map((tour, index) => {\n            return (\n              <div key={index} className=\"carta\">\n                <img\n                  src={tour.picture[0]}\n                  alt=\"mountain\"\n                  className=\"mountain-foto\"\n                  style={{ width: \"100%\" }}\n                ></img>\n\n                <div className=\"contain\">\n                  <h3 style={{ marginTop: \"20px\" }}>\n                    {tour.mountainId.mountainName}\n                  </h3>\n                  <p>{tour.mountainId.location}</p>\n                  <p>{tour.mountainId.region}</p>\n                  <p>Height: {tour.mountainId.height} mt</p>\n                  <p>Elevation Gain: {tour.mountainId.elevationGain} mt</p>\n                  <p>Difficulty: {tour.mountainId.difficulty}</p>\n                  <p>\n                    Snow Quality: {tour.snowQuality} - {tour.snowDepth} cm\n                  </p>\n                </div>\n                <div style={{ padding: \"20px\" }}>\n                  <Link className=\"btn\" to={`/tour/${tour._id}`}>\n                    View Details\n                  </Link>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n// in authservice abbiamo definito Axios e lo importiamo cosi\nimport { service } from \"../api/authService\";\nimport ToursList from \"../components/ToursList\";\n\nexport default class AllTours extends React.Component {\n  state = {\n    tours: []\n  };\n\n  // serve per aggiornare lo state di tours e popolare l array\n  componentDidMount() {\n    service.get(\"/all-tours\").then(res => {\n      this.setState({\n        tours: res.data.tours\n      });\n    });\n  }\n\n  setToursState = tours => {\n    this.setState({\n      tours: tours\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Hi {this.props.loggedinUser.username} find your tour</h1>\n        <ToursList\n          {...this.props}\n          tours={this.state.tours}\n          setToursState={this.setToursState}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n// in authservice abbiamo definito Axios e lo importiamo cosi\nimport { service } from \"../api/authService\";\nimport ToursList from \"../components/ToursList\";\n\nexport default class YourTours extends React.Component {\n  state = {\n    tours: []\n  };\n\n  // serve per aggiornare lo state di tours e popolare l array\n  componentDidMount() {\n    service.get(\"/your-tours\").then(res => {\n      this.setState({\n        tours: res.data.tours\n      });\n    });\n  }\n\n  setToursState = tours => {\n    this.setState({\n      tours: tours\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Hi {this.props.loggedinUser.username} find your tour</h1>\n        <ToursList\n          {...this.props}\n          tours={this.state.tours}\n          setToursState={this.setToursState}\n        />\n      </div>\n    );\n  }\n}\n","import Autosuggest from \"react-autosuggest\";\nimport React from \"react\";\n\n// in authservice abbiamo definito Axios e lo importiamo cosi\nimport { service } from \"../api/authService\";\n\nexport default class Auto extends React.Component {\n  // Autosuggest is a controlled component.\n  // This means that you need to provide an input value\n  // and an onChange handler that updates this value (see below).\n  // Suggestions also need to be provided to the Autosuggest,\n  // and they are initially empty because the Autosuggest is closed.\n  state = {\n    value: \"\",\n    suggestions: [],\n    // array montagne da popolare dal database mongodb\n    mountains: []\n  };\n\n  // serve per aggiornare lo state di mountains e popolare l array\n  componentDidMount() {\n    service\n      .get(\"/mountains\")\n      .then(res => this.setState({ mountains: res.data.mountains }));\n  }\n  // Teach Autosuggest how to calculate suggestions for any given input value.\n  getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    return inputLength === 0\n      ? []\n      : this.state.mountains.filter(\n          mountain =>\n            mountain.mountainName.toLowerCase().slice(0, inputLength) ===\n            inputValue\n        );\n  };\n\n  // When suggestion is clicked, Autosuggest needs to populate the input\n  // based on the clicked suggestion. Teach Autosuggest how to calculate the\n  // input value for every given suggestion.\n  getSuggestionValue = suggestion => suggestion.mountainName;\n\n  // Use your imagination to render suggestions.\n  renderSuggestion = suggestion => <div>{suggestion.mountainName}</div>;\n\n  onChange = (event, { newValue }) => {\n    let myMountainId = \"\";\n\n    let myMountain = this.state.mountains.filter(mountain => {\n      return mountain.mountainName.includes(newValue);\n    });\n\n    if (myMountain.length > 0) {\n      myMountainId = myMountain[0]._id;\n      console.log(\"la montagna c e\");\n    } else {\n      console.log(\"array vuota\");\n      myMountainId = \"\";\n    }\n\n    this.setState({\n      value: newValue\n    });\n    // lift value up to CreateTour component\n    this.props.setValue(newValue, myMountainId);\n\n    // dobboamo mettere [0] perche .filter (come .map) ritornano sempre un array, anche se contiene un solo elemento\n    // console.log(myMountain[0]._id, \"id\");\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: this.getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: \"mountain\",\n      value,\n      onChange: this.onChange\n    };\n\n    // Finally, render it!\n    // aggiunto this. perche abbiamo spostato all interno del component la logica getSuggestion e renderSuggestion\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={this.getSuggestionValue}\n        renderSuggestion={this.renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\n// ORIGINALE //\n\n// import Autosuggest from \"react-autosuggest\";\n// import React from \"react\";\n// import axios from \"axios\";\n\n// const service = axios.create({\n//   baseURL: process.env.REACT_APP_BASE_URL,\n//   withCredentials: true\n// });\n\n// // Imagine you have a list of languages that you'd like to autosuggest.\n// const languages = [\n//   {\n//     name: \"Curo\",\n//     height: 3300,\n//     area: \"Alpi Orobie\"\n//   },\n//   {\n//     name: \"Elm\",\n//     year: 2012\n//   },\n\n//   {\n//     name: \"Elmo\",\n//     year: 2012\n//   },\n\n//   {\n//     name: \"Elsa\",\n//     year: 2012\n//   },\n\n//   {\n//     name: \"Eletrre\",\n//     year: 2012\n//   }\n// ];\n\n// // Teach Autosuggest how to calculate suggestions for any given input value.\n// const getSuggestions = value => {\n//   const inputValue = value.trim().toLowerCase();\n//   const inputLength = inputValue.length;\n\n//   return inputLength === 0\n//     ? []\n//     : languages.filter(\n//         lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue\n//       );\n// };\n\n// // When suggestion is clicked, Autosuggest needs to populate the input\n// // based on the clicked suggestion. Teach Autosuggest how to calculate the\n// // input value for every given suggestion.\n// const getSuggestionValue = suggestion => suggestion.name;\n\n// // Use your imagination to render suggestions.\n// const renderSuggestion = suggestion => <div>{suggestion.name}</div>;\n\n// export default class Auto extends React.Component {\n//   constructor() {\n//     super();\n\n//     // Autosuggest is a controlled component.\n//     // This means that you need to provide an input value\n//     // and an onChange handler that updates this value (see below).\n//     // Suggestions also need to be provided to the Autosuggest,\n//     // and they are initially empty because the Autosuggest is closed.\n//     this.state = {\n//       value: \"\",\n//       suggestions: []\n//     };\n//   }\n\n//   onChange = (event, { newValue }) => {\n//     this.setState({\n//       value: newValue\n//     });\n//     // lift value up to CreateTour component\n//     this.props.setValue(newValue);\n//   };\n\n//   // Autosuggest will call this function every time you need to update suggestions.\n//   // You already implemented this logic above, so just use it.\n//   onSuggestionsFetchRequested = ({ value }) => {\n//     this.setState({\n//       suggestions: getSuggestions(value)\n//     });\n//   };\n\n//   // Autosuggest will call this function every time you need to clear suggestions.\n//   onSuggestionsClearRequested = () => {\n//     this.setState({\n//       suggestions: []\n//     });\n//   };\n\n//   render() {\n//     const { value, suggestions } = this.state;\n\n//     // Autosuggest will pass through all these props to the input.\n//     const inputProps = {\n//       placeholder: \"mountain\",\n//       value,\n//       onChange: this.onChange\n//     };\n\n//     // Finally, render it!\n//     return (\n//       <Autosuggest\n//         suggestions={suggestions}\n//         onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n//         onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n//         getSuggestionValue={getSuggestionValue}\n//         renderSuggestion={renderSuggestion}\n//         inputProps={inputProps}\n//       />\n//     );\n//   }\n// }\n","import React from \"react\";\nimport { createTour } from \"../api/userService\";\nimport Auto from \"../components/AutoSuggest\";\n\nexport default class CreateTour extends React.Component {\n  state = {\n    mountainName: \"\",\n    mountainId: \"\"\n  };\n\n  // parte del form ref per upload foto\n  formRef = React.createRef();\n\n  setValue = (value, id) => {\n    this.setState({\n      mountainName: value,\n      mountainId: id\n    });\n  };\n\n  onChangeHandler = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  submitHandler = e => {\n    e.preventDefault();\n    // formData per passare la foto nel req.file (req.body e' solo testo)\n    const formData = new FormData(this.formRef.current);\n    // createTour(this.state, formData)\n    createTour(formData)\n      .then(res => {\n        console.log(this.state.mountainId);\n        this.props.history.push(\"/your-tours\");\n      })\n      .catch(res => {\n        debugger;\n        this.setState({\n          errorMessage: res.response.data.errorMessage\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"create-tour\">\n        <h1>Create your tour</h1>\n        <form ref={this.formRef} onSubmit={this.submitHandler}>\n          <input type=\"file\" name=\"picture\" multiple />\n          <input type=\"date\" name=\"date\" />\n\n          <Auto type=\"text\" name=\"mountainName\" setValue={this.setValue} />\n\n          {/* input hidden creto per poter passare mountainId al server tramite req.body, extrastep fatto per poter passare anche la foto, che non e' parte dello this.state */}\n\n          <input\n            type=\"hidden\"\n            name=\"mountainId\"\n            value={this.state.mountainId}\n          />\n\n          <select type=\"text\" name=\"snowQuality\" placeholder=\"snowQuality\">\n            <option value=\"powder\">Powder</option>\n            <option value=\"crud\">Crud</option>\n            <option value=\"crust\">Crust</option>\n            <option value=\"slush\">Slush</option>\n            <option value=\"ice\">Ice</option>\n          </select>\n\n          <select type=\"number\" name=\"snowDepth\" placeholder=\"snowDepth\">\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"15\">15</option>\n            <option value=\"20\">20</option>\n            <option value=\"25\">25</option>\n            <option value=\"30\">30</option>\n            <option value=\"35\">35</option>\n            <option value=\"40\">40</option>\n            <option value=\"45\">45</option>\n            <option value=\"50\">50</option>\n          </select>\n\n          <select type=\"text\" name=\"recomended\" placeholder=\"recomended\">\n            <option value=\"Yes\">Yes</option>\n            <option value=\"No\">No</option>\n          </select>\n\n          <textarea\n            style={{\n              width: \"500px\",\n              height: \"200px\",\n              borderRadius: \"4px\",\n              boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2)\",\n              border: \"none\",\n              padding: \"10px\"\n            }}\n            name=\"description\"\n            placeholder=\"description\"\n          />\n          <div style={{ width: \"500px\", margin: \"0 auto\" }}>\n            <button className=\"btn\" type=\"submit\">\n              submit\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { logout } from \"../api/authService\";\nimport Video from \"../backvideo.mp4\";\n\nexport default class NavBar extends React.Component {\n  logoutHandler = () => {\n    try {\n      logout();\n\n      this.props.setUserState(null);\n      this.props.history.push(\"/\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  render() {\n    return (\n      <nav className=\"sticky\">\n        {this.props.loggedinUser ? (\n          <div classNaem=\"navy\">\n            <ul>\n              <li>\n                <Link to=\"/your-tours\">Your Tours</Link>\n              </li>\n              <li>\n                <Link to=\"/create-tour\">Create Tour</Link>\n              </li>\n              <li>\n                <Link to=\"/all-tours\">All Tours</Link>\n              </li>\n              <li>\n                <Link to=\"/profile\">Profile</Link>\n              </li>\n              <li>\n                <Link to=\"/\" onClick={this.logoutHandler} className=\"active\">\n                  Logout\n                </Link>\n              </li>\n            </ul>\n          </div>\n        ) : (\n          <div>\n            <div className=\"content\">\n              <h1>SKIALP</h1>\n              <span>\n                Save and share your tours\n                <br /> find the latest information to better plan your tours\n              </span>\n              <div style={{ marginTop: \"30px\", color: \"white\" }}>\n                <span>\n                  <Link\n                    style={{\n                      color: \"white\",\n                      display: \"inline-block\",\n                      marginRight: \"10px\"\n                    }}\n                    to=\"/login\"\n                  >\n                    Login\n                  </Link>\n                </span>\n                <span>\n                  <Link style={{ color: \"white\" }} to=\"/signup\">\n                    Signup\n                  </Link>\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n      </nav>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport { Carousel } from \"react-responsive-carousel\";\n\nclass DemoCarousel extends Component {\n  render() {\n    return (\n      <Carousel>\n        {this.props.pictures.map((foto, index) => {\n          console.log(\"foto\", foto);\n          return (\n            <div>\n              <img style={{ width: \"70%\" }} src={foto} />\n            </div>\n          );\n        })}\n      </Carousel>\n    );\n  }\n}\n\nexport default DemoCarousel;\n","import React from \"react\";\n// in authservice abbiamo definito Axios e lo importiamo cosi\nimport { service } from \"../api/authService\";\nimport DemoCarousel from \"../components/DemoCarousel\";\n\nexport default class Tour extends React.Component {\n  state = {\n    tour: null,\n    message: null,\n    tourId: null\n  };\n\n  // funzione creata per poter fare il reload del tour dopo l aggiunta dei commenti, quindi lo richiamiamo su submithandler ma anche in component didmount che viene chiamato per primo dala DOM\n  getTour = () => {\n    const id = this.props.match.params.id;\n\n    service.get(`/tour/${id}`).then(res => {\n      console.log(res);\n      this.setState({\n        tour: res.data.tour,\n        tourId: res.data.tour._id\n      });\n    });\n  };\n  componentDidMount() {\n    this.getTour();\n  }\n\n  onChangeHandler = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  submitHandler = e => {\n    const comment = { message: this.state.message, tourId: this.state.tourId };\n    e.preventDefault();\n    console.log(this.state.message);\n    service\n      // comments e' l oggetto che passiamo sulla rout create-comments\n      .post(\"/create-comment\", comment)\n      .then(res => {\n        this.getTour();\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  render() {\n    let tour = this.state.tour;\n    console.log(\"\", this.state.tour);\n    return (\n      <div>\n        <div>\n          {tour ? (\n            <div>\n              <DemoCarousel pictures={tour.picture} />\n\n              <div className=\"carta tour-container\">\n                <h1>{tour.mountainId.mountainName}</h1>\n                <p>\n                  <strong>Location: </strong>\n                  {tour.mountainId.location}\n                </p>\n                <p>\n                  <strong>Region: </strong>\n                  {tour.mountainId.region}\n                </p>\n                <p>\n                  <strong>Height:</strong> {tour.mountainId.height} mt\n                </p>\n                <p>\n                  <strong>Elevation Gain:</strong>\n                  {tour.mountainId.elevationGain} mt\n                </p>\n                <p>\n                  <strong>Difficulty:</strong> {tour.mountainId.difficulty}\n                </p>\n                <p>\n                  <strong>Snow Quality:</strong> {tour.snowQuality} -{\" \"}\n                  {tour.snowDepth} cm\n                </p>\n\n                {/* <p>\n                  <strong>Useful links:</strong>\n                </p>\n                <p>\n                  <a href={tour.mountainId.link} target=\"_blank\">\n                    Tour Details\n                  </a>\n                </p>\n                <p>\n                  <a\n                    href=\"https://www.aineva.it/bollettini/#top\"\n                    target=\"_blank\"\n                  >\n                    AINEVA\n                  </a>\n                </p> */}\n\n                <span>{tour.description}</span>\n              </div>\n\n              <div>\n                <h2 style={{ marginTop: \"40px\" }}>Comments</h2>\n                {this.state.tour.comments.map((tour, index) => {\n                  return (\n                    <div key={index}>\n                      <p style={{ position: \"relative\", top: \"10px\" }}>\n                        <strong>{tour.username}</strong>\n                      </p>\n                      <p>{tour.message}</p>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          ) : (\n            <p>loading Tour</p>\n          )}\n        </div>\n        <div>\n          <form onSubmit={this.submitHandler}>\n            <textarea\n              style={{\n                width: \"60%\",\n                height: \"200px\",\n                borderRadius: \"4px\",\n                boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2)\",\n                border: \"none\",\n                padding: \"10px\"\n              }}\n              type=\"text\"\n              name=\"message\"\n              placeholder=\"message\"\n              onChange={this.onChangeHandler}\n            />\n            <div style={{ width: \"60%\", margin: \"0 auto\" }}>\n              <button className=\"btn\" type=\"submit\">\n                submit\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport SignUp from \"./pages/SignUp\";\nimport Login from \"./pages/Login\";\nimport { isLoggedIn } from \"./api/authService\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport Profile from \"./pages/Profile\";\nimport AllTours from \"./pages/AllTours\";\nimport YourTours from \"./pages/YourTours\";\nimport CreateTour from \"./pages/CreateTour\";\nimport NavBar from \"./components/NavBar\";\nimport UpdateProfile from \"./components/UpdateProfile\";\nimport Tour from \"./pages/Tour\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Video from \"./backvideo.mp4\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loggedinUser: null,\n      isLoading: true,\n      err: null\n    };\n  }\n\n  setUserState = user => {\n    // If user is loggedIn state will be set with user,\n    // otherwise user will be null.\n    // App.js setState()\n    this.setState({\n      loggedinUser: user\n    });\n  };\n\n  componentDidMount = async () => {\n    try {\n      const currentUser = await isLoggedIn();\n      this.setState({\n        loggedinUser: currentUser,\n        isLoading: false\n      });\n    } catch (err) {\n      this.setState({\n        loggedinUser: null,\n        isLoading: false\n      });\n    }\n  };\n\n  render() {\n    console.log(this.state.loggedinUser, \"da app.js\");\n    if (this.state.isLoading) return <p>... Loading</p>;\n    return (\n      <div className=\"App\">\n        <NavBar\n          loggedinUser={this.state.loggedinUser}\n          setUserState={this.setUserState}\n        />\n        {!this.state.loggedinUser && (\n          <video autoPlay muted loop className=\"myVideo\">\n            <source src={Video} type=\"video/mp4\" />\n          </video>\n        )}\n        <Switch>\n          <Route path=\"/signup\" component={SignUp}></Route>\n          <Route\n            path=\"/login\"\n            render={props => (\n              <Login {...props} setUserState={this.setUserState} />\n            )}\n          />\n\n          <PrivateRoute\n            path=\"/profile\"\n            loggedinUser={this.state.loggedinUser}\n            setUserState={this.setUserState}\n            component={Profile}\n          />\n\n          <PrivateRoute\n            path=\"/update-profile\"\n            loggedinUser={this.state.loggedinUser}\n            setUserState={this.setUserState}\n            component={UpdateProfile}\n          />\n\n          <PrivateRoute\n            path=\"/all-tours\"\n            loggedinUser={this.state.loggedinUser}\n            component={AllTours}\n          />\n          <PrivateRoute\n            path=\"/your-tours\"\n            loggedinUser={this.state.loggedinUser}\n            component={YourTours}\n          />\n          <PrivateRoute\n            path=\"/create-tour\"\n            loggedinUser={this.state.loggedinUser}\n            component={CreateTour}\n          />\n\n          <PrivateRoute\n            path=\"/tour/:id\"\n            loggedinUser={this.state.loggedinUser}\n            component={Tour}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}